#Fecha de última modificación: 29/05/2025

# === IMPORTACIONES ===
import numpy as np
import matplotlib.pyplot as plt
import sounddevice as sd
from matplotlib.widgets import Button
from scipy.io.wavfile import write
import os
import matplotlib.animation as animation

# === FUNCIONES ===

def audio_callback(indata, frames, time, status): #Función que se llama automáticamente 
    if status:                                    #con cada bloque de audio capturado
        print("Estado:", status)
    if running:
        audio_buffer.append(indata.copy())

def update_plot(frame):
    """Actualiza la gráfica con el último bloque de audio."""
    if not running or len(audio_buffer) == 0:
        return lines

    latest_block = audio_buffer[-1]

    for i in range(4):
        lines[i].set_data(t, latest_block[:, i + 1])  # Micrófonos 1 a 4

    lines[4].set_data(t, latest_block[:, 0])          # Suma en canal 0

    return lines

def guardar_audio(event):
    """Función que guarda los archivos WAV al presionar el botón."""
    global running
    running = False
    print("Guardando audio...")

    audio_data = np.concatenate(audio_buffer, axis=0)
    audio_int16 = np.int16(audio_data * 32767)

    for i in range(4):
        filepath = os.path.join(output_folder, f"mic_{i+1}.wav")        
        write(filepath, samplerate, audio_int16[:, i + 1])          #Guarda lo de los canales
        print(f"Guardado: {filepath}")

    suma_path = os.path.join(output_folder, "suma.wav")
    write(suma_path, samplerate, audio_int16[:, 0])                 #Guarda lo de la suma
    print(f"Guardado: {suma_path}")


# === VARIABLES GLOBALES Y CONFIGURACIÓN ===

device_index = 7                     # Cambiar si es necesario
samplerate = 16000
channels = 6
blocksize = 1024

output_folder = r"C:\Users\leona\Documents\Proyecto\Códigos\Audios"
os.makedirs(output_folder, exist_ok=True)

audio_buffer = []
running = True
t = np.linspace(0, blocksize / samplerate, blocksize)

# === FUNCIÓN PRINCIPAL ===

def main():
    global lines

    # Crear figura y subgráficas
    fig, axs = plt.subplots(5, 1, figsize=(10, 10))
    lines = []

    for i in range(4):
        axs[i].set_title(f"Micrófono {i+1}")
        axs[i].set_ylim(-2, 2)
        axs[i].set_xlim(0, blocksize / samplerate)
        line, = axs[i].plot([], [])
        lines.append(line)

    axs[4].set_title("Suma de las señales")
    axs[4].set_ylim(-2, 2)
    axs[4].set_xlim(0, blocksize / samplerate)
    line_suma, = axs[4].plot([], [])
    lines.append(line_suma)

    plt.tight_layout()

    # Botón de guardado
    button_ax = plt.axes([0.8, 0.01, 0.1, 0.05])
    button = Button(button_ax, "Guardar Audio")
    button.on_clicked(guardar_audio)

    # Iniciar captura y visualización
    with sd.InputStream(callback=audio_callback,
                        channels=channels,
                        samplerate=samplerate,
                        blocksize=blocksize,
                        dtype='float32',
                        device=(device_index, None)):
        
        ani = animation.FuncAnimation(fig, update_plot, interval=50)
        plt.show()

    print("Finalizado.")

# === BLOQUE PROTECTOR ===
if __name__ == "__main__":
    main()

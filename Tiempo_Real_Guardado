import numpy as np                               # Importa NumPy para trabajar con arrays numéricos
import sounddevice as sd                         # Importa sounddevice para capturar audio del micrófono
import matplotlib.pyplot as plt                  # Importa matplotlib para graficar las señales
from matplotlib.animation import FuncAnimation   # Para animar las gráficas en tiempo real
from matplotlib.widgets import Button            # Para agregar un botón a la ventana de la gráfica
from scipy.io.wavfile import write               # Para guardar archivos WAV
import datetime                                  # Para obtener la fecha y hora actual

# === CONFIGURACIÓN INICIAL ===
device_index = 1                            # Índice del dispositivo de audio
samplerate = 16000                          # Frecuencia de muestreo: 16 kHz
channels = 4                                # Número de micrófonos (canales)
blocksize = 1024                            # Número de muestras por bloque de audio
duration_buffer = 60                        # Duración máxima del buffer (en segundos)
max_frames = samplerate * duration_buffer   # Máximo de frames a guardar

# === VARIABLES GLOBALES ===
audio_buffer = []                           # Lista para almacenar los bloques de audio
running = True                              # Bandera para controlar si la animación sigue

# === PREPARAR FIGURA Y EJES DE LA GRÁFICA ===
fig, axs = plt.subplots(5, 1, figsize=(10, 10))  # 4 canales + 1 suma, en subgráficas
lines = []                                  # Lista para guardar las líneas de cada gráfico

# Inicializa las líneas vacías para cada canal (y la suma)
for ax in axs:
    line, = ax.plot([], [], lw=1)           # Crea una línea vacía
    lines.append(line)                      # La guarda
    ax.set_xlim(0, blocksize / samplerate)  # Establece límite del eje X (tiempo)
    ax.set_ylim(-0.5, 0.5)                  # Establece límite del eje Y (amplitud)
    ax.set_xlabel("Tiempo [s]")             # Etiqueta del eje X
    ax.set_ylabel("Amplitud")               # Etiqueta del eje Y

# Títulos para cada gráfico
axs[0].set_title("Micrófono 1")
axs[1].set_title("Micrófono 2")
axs[2].set_title("Micrófono 3")
axs[3].set_title("Micrófono 4")

# Configura el gráfico de la suma en el último eje (axs[4])
axs[4].set_title("Suma de los 4")
axs[4].set_xlabel("Tiempo [s]")
axs[4].set_ylabel("Amplitud")
axs[4].set_ylim(-1, 1)  # Establece un límite de amplitud para la suma

# === FUNCIÓN PARA ACTUALIZAR LA GRÁFICA EN CADA CUADRO ===
def update_plot(frame):
    if not running:
        return lines

    if len(audio_buffer) == 0:
        return lines  # No hay datos aún

    # Toma solo el último bloque de audio
    latest_block = audio_buffer[-1]

    # Crea eje de tiempo para el bloque
    t = np.linspace(0, len(latest_block) / samplerate, len(latest_block))

    # Actualiza las líneas de los 4 canales
    for i in range(4):
        lines[i].set_data(t, latest_block[:, i])  # Señal del canal i

    # Calcula la suma de los 4 canales
    suma = np.sum(latest_block, axis=1)
    lines[4].set_data(t, suma)  # Muestra la suma en la última línea (índice 4)

    return lines

# === FUNCIÓN PARA CAPTURAR AUDIO (SE LLAMA AUTOMÁTICAMENTE POR sounddevice) ===
def audio_callback(indata, frames, time, status):
    if status:
        print("Status:", status)  # Muestra errores si los hay

    if running:
        audio_buffer.append(indata.copy())  # Guarda el bloque actual

        # Limita la cantidad de bloques para evitar uso excesivo de memoria
        if len(audio_buffer) * blocksize > max_frames:
            audio_buffer.pop(0)

# === INICIO DE CAPTURA DE AUDIO ===
stream = sd.InputStream(
    samplerate=samplerate,      # Frecuencia de muestreo
    blocksize=blocksize,        # Tamaño del bloque
    channels=channels,          # Número de canales
    device=(device_index, None),# Dispositivo de entrada
    callback=audio_callback     # Función que se llama en cada bloque
)
stream.start()  # Comienza a capturar

# === ANIMACIÓN DE LAS GRÁFICAS ===
ani = FuncAnimation(fig, update_plot, interval=50)  # Actualiza cada 50 ms

plt.tight_layout()   # Ajusta los márgenes
plt.show()           # Muestra la ventana (bloquea hasta que se cierre)

# === FUNCIÓN PARA GUARDAR LOS ARCHIVOS WAV ===
def guardar_audio():
    print("Guardando audio...")

    # Une todos los bloques en un solo array
    full_audio = np.concatenate(audio_buffer, axis=0)

    # Obtiene la hora actual para el nombre del archivo
    timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")

    # Guarda cada canal por separado
    for i in range(channels):
        canal = full_audio[:, i]
        filename = f"canal{i+1}_{timestamp}.wav"
        write(filename, samplerate, (canal * 32767).astype(np.int16))  # Normaliza y guarda

    # Guarda también la suma de todos
    suma = np.sum(full_audio, axis=1)
    suma = np.clip(suma / channels, -1, 1)  # Normaliza la suma
    filename = f"suma_{timestamp}.wav"
    write(filename, samplerate, (suma * 32767).astype(np.int16))  # Guarda la suma

    print("¡Audio guardado!")